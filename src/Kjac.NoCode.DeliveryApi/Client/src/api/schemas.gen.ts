// This file is auto-generated by @hey-api/openapi-ts

export const AddClientRequestModelSchema = {
    required: ['name', 'origin'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        origin: {
            type: 'string'
        },
        previewUrlPath: {
            type: 'string',
            nullable: true
        },
        publishedUrlPath: {
            type: 'string',
            nullable: true
        },
        culture: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AddFilterRequestModelSchema = {
    required: ['filterMatchType', 'name', 'primitiveFieldType', 'propertyAliases'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        propertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        filterMatchType: {
            '$ref': '#/components/schemas/FilterMatchTypeModel'
        },
        primitiveFieldType: {
            '$ref': '#/components/schemas/PrimitiveFieldTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const AddSortRequestModelSchema = {
    required: ['name', 'primitiveFieldType', 'propertyAlias'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        propertyAlias: {
            type: 'string'
        },
        primitiveFieldType: {
            '$ref': '#/components/schemas/PrimitiveFieldTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const ClientModelSchema = {
    required: ['id', 'name', 'origin'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        origin: {
            type: 'string'
        },
        previewUrlPath: {
            type: 'string',
            nullable: true
        },
        publishedUrlPath: {
            type: 'string',
            nullable: true
        },
        culture: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const EventMessageTypeModelSchema = {
    enum: ['Default', 'Info', 'Error', 'Success', 'Warning'],
    type: 'string'
} as const;

export const FilterListModelSchema = {
    required: ['canAddFilter', 'filters'],
    type: 'object',
    properties: {
        filters: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FilterModel'
                    }
                ]
            }
        },
        canAddFilter: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const FilterMatchTypeModelSchema = {
    enum: ['Exact', 'Partial'],
    type: 'string'
} as const;

export const FilterModelSchema = {
    required: ['alias', 'fieldName', 'filterMatchType', 'id', 'name', 'primitiveFieldType', 'propertyAliases'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        fieldName: {
            type: 'string'
        },
        primitiveFieldType: {
            '$ref': '#/components/schemas/PrimitiveFieldTypeModel'
        },
        propertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        filterMatchType: {
            '$ref': '#/components/schemas/FilterMatchTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const NotificationHeaderModelSchema = {
    required: ['category', 'message', 'type'],
    type: 'object',
    properties: {
        message: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/EventMessageTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const PrimitiveFieldTypeModelSchema = {
    enum: ['String', 'Number', 'Date'],
    type: 'string'
} as const;

export const ProblemDetailsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: {}
} as const;

export const SortListModelSchema = {
    required: ['canAddSort', 'sorts'],
    type: 'object',
    properties: {
        sorts: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SortModel'
                    }
                ]
            }
        },
        canAddSort: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const SortModelSchema = {
    required: ['alias', 'fieldName', 'id', 'name', 'primitiveFieldType', 'propertyAlias'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        fieldName: {
            type: 'string'
        },
        primitiveFieldType: {
            '$ref': '#/components/schemas/PrimitiveFieldTypeModel'
        },
        propertyAlias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateClientRequestModelSchema = {
    required: ['name', 'origin'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        origin: {
            type: 'string'
        },
        previewUrlPath: {
            type: 'string',
            nullable: true
        },
        publishedUrlPath: {
            type: 'string',
            nullable: true
        },
        culture: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateFilterRequestModelSchema = {
    required: ['name', 'propertyAliases'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        propertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateSortRequestModelSchema = {
    required: ['name', 'propertyAlias'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        propertyAlias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;